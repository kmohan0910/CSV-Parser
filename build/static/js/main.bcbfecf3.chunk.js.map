{"version":3,"sources":["components/compo.js","components/Bodal.js","App.js","serviceWorker.js","index.js"],"names":["Compo","columndata1","useState","show","setShow","lenght1","setlenght","confirmstat","setconfirm","show1","setshow1","show2","setshow2","order","setorder","noofcol","setcol","upload","setUpload","tabindex","settab","match","setmatch","match2","columndata","handladd","value","setvalue","array3","setarray3","0","1","2","3","useEffect","onDrop","useCallback","acceptedFiles","forEach","file","reader","FileReader","onabort","console","log","onerror","onload","result","csv","parse","err","data","userList","columns","i","length","push","x","JSON","stringify","newUser","j","readAsText","useDropzone","accept","getRootProps","getInputProps","readOnly","grid","setgrid","style","color","Modal","dialogClassName","onHide","Header","closeButton","Title","Body","className","Button","onChange","e","target","onClick","id","width","margin","valueRenderer","cell","onCellsChanged","changes","grid1","map","row","col","display","flexDirection","marginTop","alignItems","float","fontSize","marginLeft","splice","handleheader","Table","padding","textAlign","attr","index","undefined","background","index1","name","newMatch","newOrder","indexOf","temp","c","d","handlematch","disabled","selected","item","class","fontWeight","undoconfirm","confirmcol","inputi","Footer","variant","Bodal","App","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.bcbfecf3.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { useState } from \"react\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\n\r\nimport zhCN from \"x-data-spreadsheet/dist/locale/zh-cn\";\r\nimport Table from \"react-bootstrap/Table\";\r\nimport { useEffect } from \"react\";\r\nimport Spreadsheet from \"react-spreadsheet\";\r\nimport { useCallback } from \"react\";\r\nimport { useDropzone } from \"react-dropzone\";\r\nimport Dropzone from \"react-dropzone\";\r\nimport \"./Dragdrop.css\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport csv from \"csv\";\r\nimport CheckCircleIcon from \"@material-ui/icons/CheckCircle\";\r\nimport ErrorIcon from \"@material-ui/icons/Error\";\r\nimport ReactDataGrid from \"react-data-grid\";\r\nimport CancelIcon from \"@material-ui/icons/Cancel\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport ReactDataSheet from \"react-datasheet\";\r\nimport \"react-datasheet/lib/react-datasheet.css\";\r\nimport \"./Bodal.css\";\r\nconst Compo = ({ columndata1 }) => {\r\n  const [show, setShow] = useState(true);\r\n  const [lenght1, setlenght] = useState([]);\r\n  // States for Confirming\r\n  const [confirmstat, setconfirm] = useState([false, false, false]);\r\n  const [show1, setshow1] = useState(false);\r\n  const [show2, setshow2] = useState(false);\r\n  const [order, setorder] = useState([]);\r\n  const [noofcol, setcol] = useState([0, 1, 2]);\r\n  // const [match1, setmatch1] = useState({ FirstName: 0, Lastname: 1, Email: 2 });\r\n  const [upload, setUpload] = useState(false); //In case the user Uploads a file\r\n  const [tabindex, settab] = useState(0); //To Display the Current Tab\r\n  const [match, setmatch] = useState(columndata1); //For Tabindex 1\r\n  const [match2, setmatch2] = useState(columndata1); //for Mapping the final output\r\n\r\n  const [columndata, handladd] = useState(columndata1);\r\n  const [value, setvalue] = useState(\"\");\r\n  const [array3, setarray3] = useState({}); //ForUpload Value\r\n  const [array1, setarray] = useState({ 0: [], 1: [], 2: [], 3: [] }); //For User Value\r\n  const [inputfield, setinput] = useState([0, 1, 2, 3]);\r\n  // const s = new Spreadsheet(\"#x-spreadsheet-demo\")\r\n\r\n  // data validation\r\n  const data = [\r\n    [{ value: \"Vanilla\" }, { value: \"Chocolate\" }],\r\n    [{ value: \"Strawberry\" }, { value: \"Cookies\" }],\r\n  ];\r\n\r\n  const handleignore = () => {};\r\n  // For Page Navigation\r\n  const handleback = () => {\r\n    // console.log(column)\r\n    if (tabindex == 2 && !upload) {\r\n      settab(tabindex - 2);\r\n    } else {\r\n      settab(tabindex - 1);\r\n    }\r\n  };\r\n  const handlenext = () => {\r\n    if (tabindex == 0 && !upload) {\r\n      settab(tabindex + 2);\r\n      setUpload(false);\r\n    } else {\r\n      settab(tabindex + 1);\r\n      // console.log(\"set\", array1);\r\n    }\r\n  };\r\n  //For Modal Closure\r\n  const handleClose = () => {\r\n    setshow1(!show1);\r\n    setShow(!show);\r\n  };\r\n\r\n  // For Matching the Header\r\n  const handlematch = (e, index) => {\r\n    const newMatch = JSON.parse(JSON.stringify(match));\r\n    const newOrder = JSON.parse(JSON.stringify(order));\r\n    let x = match.indexOf(e);\r\n\r\n    let temp = newMatch[index];\r\n\r\n    newMatch[index] = e;\r\n\r\n    newMatch[x] = temp;\r\n\r\n    // console.log(newMatch[x], \"newMatch[x]\");\r\n    setmatch(newMatch);\r\n\r\n    //ColumnData  Order\r\n    // console.log(x, index);\r\n    let c = newOrder.indexOf(x);\r\n    let d = newOrder.indexOf(index);\r\n    temp = newOrder[d];\r\n    newOrder[d] = newOrder[c];\r\n    newOrder[c] = temp;\r\n\r\n    // console.log(newOrder, match);\r\n    setorder(newOrder);\r\n  };\r\n  // For the Input Fields\r\n  const setinput1 = (myvalue, index, index1) => {\r\n    const array2 = JSON.parse(JSON.stringify(array1));\r\n    array2[index].splice(index1, 1, myvalue);\r\n\r\n    setUpload(false);\r\n    // if (index==3){\r\n    //   for(var i=0 ; i<3;i++){\r\n    //     array2[index+i+1]=[]\r\n    //   }\r\n    // }\r\n    setarray(array2);\r\n    console.log(array2);\r\n\r\n    // console.log(array1, \"holla\");\r\n  };\r\n\r\n  // const setinput2 = (myvalue, index, index1) => {\r\n  //   const array2 = JSON.parse(JSON.stringify(array3));\r\n  //   array2[index].splice(index1, 1, myvalue);\r\n  //   setarray3(array2);\r\n  //   console.log(array3, \"holla\");\r\n  // };\r\n\r\n  const handleadd = (e) => {\r\n    handladd([...columndata, value]);\r\n    setcol([...noofcol, noofcol.length + 1]);\r\n    //columndata.push(value)\r\n  };\r\n  const handledelete = (index) => {\r\n    const x = JSON.parse(JSON.stringify(columndata));\r\n    const y = JSON.parse(JSON.stringify(noofcol));\r\n    y.pop();\r\n    x.splice(index, 1);\r\n    handladd(x);\r\n    setcol(y);\r\n  };\r\n\r\n  useEffect(() => {});\r\n  // For Confirming\r\n  const confirmcol = (index) => {\r\n    const x = JSON.parse(JSON.stringify(confirmstat));\r\n    x[index] = true;\r\n\r\n    setconfirm(x);\r\n    // setconfirm(x);\r\n    console.log(confirmstat, \"lock\");\r\n  };\r\n  const undoconfirm = (index) => {\r\n    const x = JSON.parse(JSON.stringify(confirmstat));\r\n    x[index] = false;\r\n\r\n    setconfirm(x);\r\n  };\r\n  const handleheader = () => {\r\n    const x = JSON.parse(JSON.stringify(array3));\r\n    x.splice(0, 1);\r\n    setarray3(x);\r\n    setshow2(false);\r\n  };\r\n\r\n  //Drag and Drop\r\n  const onDrop = useCallback((acceptedFiles) => {\r\n    acceptedFiles.forEach((file) => {\r\n      const reader = new FileReader();\r\n\r\n      reader.onabort = () => console.log(\"file reading was aborted\");\r\n      reader.onerror = () => console.log(\"file reading has failed\");\r\n      reader.onload = () => {\r\n        // Do whatever you want with the file contents here\r\n        const binaryStr = reader.result;\r\n        // console.log(binaryStr);\r\n        csv.parse(reader.result, (err, data) => {\r\n          // console.log(data, \"hii\");\r\n          var userList = [];\r\n          //lenght1=data[0].length;\r\n          let columns = [];\r\n          // if (data[0].length < match2.lenght) {    //this was in case if the data is less then the required no. of column headers\r\n          //   alert(\"Insufficient Data\");\r\n          //   return <></>;\r\n          // }\r\n          for (var i = 0; i < data[0].length; i++) {\r\n            columns.push(i);\r\n          }\r\n          const x = JSON.parse(JSON.stringify(match));\r\n          for (var i = 0; i < data[0].length - 3; i++) {\r\n            x.push(\"\");\r\n          }\r\n          setmatch(x);\r\n          setlenght(columns);\r\n          setorder(columns);\r\n\r\n          for (var i = 0; i < data.length; i++) {\r\n            const newUser = [];\r\n            for (var j = 0; j < data[0].length; j++) {\r\n              newUser.push(data[i][j]);\r\n            }\r\n            userList.push(newUser);\r\n          }\r\n\r\n          setarray3(userList);\r\n          setUpload(true);\r\n          setshow2(true);\r\n          settab(1);\r\n        });\r\n      };\r\n      reader.readAsText(file);\r\n    });\r\n  }, []);\r\n  const { getRootProps, getInputProps } = useDropzone({\r\n    accept: \".csv\",\r\n    onDrop,\r\n  });\r\n\r\n  const [grid, setgrid] = useState([\r\n    [\r\n      { value: \"Email \", readOnly: true },\r\n      { value: \"FirstName\", readOnly: true },\r\n      { value: \"LastName\", readOnly: true },\r\n    ],\r\n    [{ value: null }, { value: null }, { value: null }],\r\n    [{ value: null }, { value: null }, { value: null }],\r\n    [{ value: null }, { value: null }, { value: null }],\r\n    [{ value: null }, { value: null }, { value: null }],\r\n  ]);\r\n  const onCellsChanged = (changes) =>\r\n    changes.forEach(({ cell, row, col, value }) => {\r\n      console.log(\"New expression :\" + value);\r\n      const grid1 = grid.map((row) => [...row]);\r\n      changes.forEach(({ cell, row, col, value }) => {\r\n        grid1[row][col] = { ...grid1[row][col], value };\r\n      });\r\n      setgrid({ grid1 });\r\n    });\r\n  return (\r\n    // Page1\r\n    <div style={{ color: \"#50535b\" }}>\r\n      <Modal dialogClassName=\"modal-90w\" show={show} onHide={handleClose}>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>\r\n            {tabindex == 0 ? (\r\n              <h4>Add Bulk Records</h4>\r\n            ) : tabindex == 1 ? (\r\n              <div>\r\n                <h4>Add Bulk {array3.length} Records - Match Headers</h4>\r\n              </div>\r\n            ) : tabindex == 2 ? (\r\n              <div>\r\n                <h4>Repair Records</h4>\r\n              </div>\r\n            ) : (\r\n              \"\"\r\n            )}\r\n          </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          {/* <Basic columndata={columndata}userList={userList}/> */}\r\n          {tabindex == 0 ? (\r\n            <div>\r\n              <section className=\"container\">\r\n                <div {...getRootProps({ className: \"dropzone\" })}>\r\n                  <input {...getInputProps()} />\r\n                  <span className=\"uploadbtu\">\r\n                    <Button>Upload Files</Button>\r\n                    <p>\r\n                      You can upload any .csv, .tsv file with any set of columns\r\n                      as long as it has 1 record per row. The next step will\r\n                      allow you to match your spreadsheet columns to the right\r\n                      data points. You'll be able to clean up or remove any\r\n                      corrupted data before finalizing your report.\r\n                    </p>\r\n                  </span>\r\n                </div>\r\n                <aside></aside>\r\n              </section>\r\n\r\n              {/* Manual Data entry */}\r\n              <h2>....or just manually add data here :</h2>\r\n              <div className=\"add-column\">\r\n                <input\r\n                  className=\"add-input\"\r\n                  onChange={(e) => setvalue(e.target.value)}\r\n                ></input>\r\n                <button className=\"hello\" onClick={handleadd}>\r\n                  Add Column\r\n                </button>\r\n              </div>\r\n              <div\r\n                id=\"x-spreadsheet-demo\"\r\n                style={{ width: \"100%\", margin: \"20px\" }}\r\n              >\r\n                <ReactDataSheet\r\n                  valueRenderer={(cell) => cell.value}\r\n                  data={grid}\r\n                  onCellsChanged={(changes) => {\r\n                    const grid1 = grid.map((row) => [...row]);\r\n                    console.log(grid1);\r\n                    changes.forEach(({ cell, row, col, value }) => {\r\n                      grid1[row][col] = { ...grid1[row][col], value };\r\n                    });\r\n                    console.log(grid1);\r\n                    setgrid(grid1);\r\n                  }}\r\n                />\r\n              </div>\r\n              {/* <Spreadsheet data={data} /> */}\r\n              {/* <Table striped bordered hover>\r\n                <thead>\r\n                  <tr>\r\n                    \r\n                    {columndata.map((attr, index) => {\r\n                      return (\r\n                        <th>\r\n                          {columndata[index]}\r\n                          <CloseIcon\r\n                            style={{ fill: \"red\", float: \"right\" }}\r\n                            onClick={() => handledelete(index)}\r\n                          />\r\n                        </th>\r\n                      );\r\n                    })}\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {inputfield.map((inputi, index) => {\r\n                    return (\r\n                      <tr>\r\n                        {noofcol.map((attr, index1) => {\r\n                          return (\r\n                            <td>\r\n                              <input\r\n                                value={array1[index][index1]}\r\n                                onChange={(e) =>\r\n                                  setinput1(e.target.value, index, index1)\r\n                                }\r\n                              ></input>\r\n                            </td>\r\n                          );\r\n                        })}\r\n                      </tr>\r\n                    );\r\n                  })}\r\n                </tbody>\r\n              </Table> */}\r\n            </div>\r\n          ) : tabindex == 1 ? (\r\n            <>\r\n              {show2 ? (\r\n                <div\r\n                  style={{\r\n                    width: \"100%\",\r\n                    display: \"flex\",\r\n                    flexDirection: \"column-reverse\",\r\n                    marginTop: \"12%\",\r\n                    alignItems: \"center\",\r\n                  }}\r\n                >\r\n                  <div\r\n                    style={{\r\n                      margin: \"10px\",\r\n\r\n                      float: \"left\",\r\n                    }}\r\n                  >\r\n                    <h2 style={{ fontSize: \"25px\" }}>\r\n                      Does your Data contain column Headers?\r\n                      {console.log(array3)}\r\n                    </h2>\r\n                    <div\r\n                      style={{\r\n                        margin: \"10px\",\r\n\r\n                        marginLeft: \"117px\",\r\n                      }}\r\n                    >\r\n                      <Button\r\n                        className=\"tabindex1\"\r\n                        color=\"#5858e0\"\r\n                        onClick={() => setshow2(false)}\r\n                      >\r\n                        No\r\n                      </Button>\r\n                      <Button\r\n                        className=\"tabindex12\"\r\n                        color=\"#5858e0\"\r\n                        onClick={() => handleheader()}\r\n                      >\r\n                        Yes\r\n                      </Button>\r\n                    </div>\r\n                  </div>\r\n                  <div style={{ float: \"right\", width: \"60%\" }}>\r\n                    <Table>\r\n                      <thead>\r\n                        <tr>\r\n                          <th style={{ padding: \"7px\", textAlign: \"center\" }}>\r\n                            1\r\n                          </th>\r\n                          {array3.map((attr, index) => {\r\n                            if (\r\n                              attr == undefined ||\r\n                              (attr == null && index < array3.length)\r\n                            ) {\r\n                              return <></>;\r\n                            }\r\n                            return (\r\n                              <th\r\n                                style={{\r\n                                  background: \"aliceblue\",\r\n                                  padding: \"11px\",\r\n                                  textAlign: \"left\",\r\n                                }}\r\n                              >\r\n                                {array3[0][index]}\r\n                              </th>\r\n                            );\r\n                          })}\r\n                        </tr>\r\n                      </thead>\r\n                      <tr>\r\n                        <th style={{ padding: \"7px\", textAlign: \"center\" }}>\r\n                          2\r\n                        </th>\r\n                        {array3.map((attr, index) => {\r\n                          if (\r\n                            attr == undefined ||\r\n                            (attr == null && index < array3.length)\r\n                          ) {\r\n                            return <></>;\r\n                          }\r\n                          return (\r\n                            <th style={{ padding: \"11px\", textAlign: \"left\" }}>\r\n                              {array3[1][index]}\r\n                            </th>\r\n                          );\r\n                        })}\r\n                      </tr>\r\n                    </Table>\r\n                  </div>\r\n                </div>\r\n              ) : (\r\n                <div style={{ display: \"flex\", flexDirection: \"column\" }}>\r\n                  {lenght1.map((attr, index1) => {\r\n                    return (\r\n                      <div style={{ width: \"100%\", display: \"flex\" }}>\r\n                        <Table style={{ width: \"50%\" }}>\r\n                          <thead>\r\n                            <tr>\r\n                              <th style={{ background: \"#efefef6e\" }}>\r\n                                <div style={{ padding: \"10px\" }}>\r\n                                  {console.log(array3[0], index1)}\r\n                                  {/* {index1 <= array3.length\r\n                                    ? array3[0][index1]\r\n                                    : \"\"} */}\r\n                                  <select\r\n                                    name=\"columns\"\r\n                                    id=\"headers\"\r\n                                    style={{ display: \"flex\", float: \"right\" }}\r\n                                    onChange={(e) => {\r\n                                      handlematch(e.target.value, index1);\r\n                                    }}\r\n                                    value={match[index1]}\r\n                                    disabled={confirmstat[index1]}\r\n                                  >\r\n                                    <option\r\n                                      value={\r\n                                        match[index1] ? match[index1] : \"_\"\r\n                                      }\r\n                                      selected\r\n                                      //hidden=\"true\"\r\n                                    >\r\n                                      {/* Select the Column Name */}\r\n                                      {match[index1]}\r\n                                    </option>\r\n\r\n                                    {match.map((attr, index) => {\r\n                                      if (index === index1) return <></>;\r\n                                      return (\r\n                                        <>\r\n                                          {!match[index].length == 0 ? (\r\n                                            <option\r\n                                              disabled={confirmstat[index]}\r\n                                              value={match[index]}\r\n                                            >\r\n                                              {match[index]}\r\n                                            </option>\r\n                                          ) : (\r\n                                            \"\"\r\n                                          )}\r\n                                        </>\r\n                                      );\r\n                                    })}\r\n                                  </select>\r\n                                </div>\r\n                              </th>\r\n                            </tr>\r\n                          </thead>\r\n                          {array3.length\r\n                            ? array3.map((item, index) => {\r\n                                return index < 4 ? (\r\n                                  <tr>\r\n                                    <td>{array3[index][index1]}</td>\r\n                                  </tr>\r\n                                ) : (\r\n                                  \"\"\r\n                                );\r\n                              })\r\n                            : \"\"}\r\n                        </Table>\r\n                        <div className=\"volla\" style={{ width: \"50%\" }}>\r\n                          <div style={{ marginTop: \"30px\" }}>\r\n                            <aside class=\"column-matched\">\r\n                              <ul>\r\n                                {\" \"}\r\n                                {match[index1] ? (\r\n                                  <li\r\n                                    style={{\r\n                                      fontWeight: \"500\",\r\n                                      color: \"#50535b\",\r\n                                    }}\r\n                                  >\r\n                                    <CheckCircleIcon\r\n                                      fontSize=\"small\"\r\n                                      style={{ color: \"green\", padding: \"2px\" }}\r\n                                    />\r\n                                    Matched to the{\" \"}\r\n                                    <span class=\"suggested-fieldname primaryTextColor\">\r\n                                      {match[index1]}\r\n                                    </span>{\" \"}\r\n                                    field.\r\n                                  </li>\r\n                                ) : (\r\n                                  <li\r\n                                    style={{\r\n                                      fontWeight: \"500\",\r\n                                      color: \"#50535b\",\r\n                                    }}\r\n                                  >\r\n                                    <ErrorIcon\r\n                                      fontSize=\"small\"\r\n                                      style={{ color: \"red\", padding: \"2px\" }}\r\n                                    />\r\n                                    Not Matched!\r\n                                    {/* <span class=\"suggested-fieldname primaryTextColor\">\r\n                                {match[index1]}\r\n                              </span>{\" \"} */}\r\n                                  </li>\r\n                                )}\r\n                                {/* <li>\r\n                          <i class=\"fa fa-info-circle\"></i>100% of your rows\r\n                          have a value for this column\r\n                        </li> */}\r\n                              </ul>\r\n                              {!confirmstat[index1] ? (\r\n                                <div class=\"confirm-box\">\r\n                                  <span>\r\n                                    <button\r\n                                      className=\"comfirm-button2\"\r\n                                      id=\"confirmed-0\"\r\n                                      // tabindex=\"4\"\r\n                                      onClick={() => confirmcol(index1)}\r\n                                    >\r\n                                      Confirm mapping\r\n                                    </button>\r\n                                  </span>\r\n                                  {/* <span>\r\n                                <button\r\n                                  className=\"hello12\"\r\n                                  // class=\"button invert\"\r\n                                  \r\n                                  tabindex=\"5\"\r\n                                  onclick={() => handleignore}\r\n                                >\r\n                                  Ignore this column\r\n                                </button>\r\n                              </span> */}\r\n                                </div>\r\n                              ) : (\r\n                                <div class=\"confirm-box\">\r\n                                  <span>\r\n                                    <button\r\n                                      className=\"comfirm-button\"\r\n                                      id=\"confirmed-0\"\r\n                                      // tabindex=\"4\"\r\n                                      // onClick={() => confirmcol(index1)}\r\n                                    >\r\n                                      confirmed\r\n                                    </button>\r\n                                  </span>\r\n                                  <span>\r\n                                    <button\r\n                                      className=\"hello12\"\r\n                                      // class=\"button invert\"\r\n                                      id=\"ignored-0\"\r\n                                      tabindex=\"5\"\r\n                                      onClick={() => undoconfirm(index1)}\r\n                                    >\r\n                                      Undo\r\n                                    </button>\r\n                                  </span>\r\n                                </div>\r\n                              )}\r\n                            </aside>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    );\r\n                  })}\r\n                </div>\r\n              )}\r\n            </>\r\n          ) : (\r\n            <div>\r\n              {upload ? (\r\n                <Table>\r\n                  <thead>\r\n                    <tr>\r\n                      {/* <th>SNo</th> */}\r\n                      {match2.map((attr, index) => {\r\n                        if (attr == undefined || attr == null) {\r\n                          return <></>;\r\n                        }\r\n                        return <th>{attr}</th>;\r\n                      })}\r\n                      {/* {console.log(match, \"looo\")} */}\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    {array3.map((inputi, index) => {\r\n                      return (\r\n                        <tr>\r\n                          {/* <td>{index+1}</td> */}\r\n                          {array3[index].length == 0\r\n                            ? \"\"\r\n                            : order.map((attr, index1) => {\r\n                                if (index1 < 3) {\r\n                                  return array3[index][attr] ? (\r\n                                    <td>{array3[index][attr]}</td>\r\n                                  ) : (\r\n                                    <td className=\"modal2\">\r\n                                      {array3[index][attr]}\r\n                                      {/* <input style={{width:\"100%\"}}\r\n                                // value={array3[index][attr]}\r\n                                onBlur={(e) =>\r\n                                  setinput2(e.target.value, index, attr)\r\n                                }\r\n                              ></input> */}\r\n                                    </td>\r\n                                  );\r\n                                }\r\n                              })}\r\n                        </tr>\r\n                      );\r\n                    })}\r\n                    {/* {console.log(array3, order)} */}\r\n                  </tbody>\r\n                </Table>\r\n              ) : (\r\n                <div\r\n                  id=\"x-spreadsheet-demo\"\r\n                  style={{ width: \"100%\", margin: \"20px\" }}\r\n                >\r\n                  <ReactDataSheet\r\n                    valueRenderer={(cell) => cell.value}\r\n                    data={grid}\r\n                    onCellsChanged={(changes) => {\r\n                      const grid1 = grid.map((row) => [...row]);\r\n                      console.log(grid1);\r\n                      changes.forEach(({ cell, row, col, value }) => {\r\n                        grid1[row][col] = { ...grid1[row][col], value };\r\n                      });\r\n                      console.log(grid1);\r\n                      setgrid(grid1);\r\n                    }}\r\n                  />\r\n                </div>\r\n              )}\r\n            </div>\r\n          )}\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          {tabindex == 0 ? (\r\n            \"\"\r\n          ) : (\r\n            <Button className=\"hello1\" variant=\"primary\" onClick={handleback}>\r\n              Back\r\n            </Button>\r\n          )}\r\n          <Button onClick={handlenext} disabled={tabindex < 2 ? false : true}>\r\n            Continue\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\nexport default Compo;\r\n","import React from \"react\";\r\nimport { useState } from \"react\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport \"./Bodal.css\";\r\nimport Table from \"react-bootstrap/Table\";\r\nimport { useEffect } from \"react\";\r\nimport Compo from \"./compo\";\r\n\r\nconst Bodal = () => {\r\n  const handleShow = () => setShow(!show);\r\n  const [columndata, handladd] = useState([\"Email\", \"FirstName\", \"LastName\"]);\r\n  const [show, setShow] = useState(false);\r\n\r\n  useEffect(() => {});\r\n\r\n  return (\r\n    <div>\r\n      <Button variant=\"primary\" className=\"hi\" onClick={handleShow}>\r\n        {\" \"}\r\n        Upload CSV{\" \"}\r\n      </Button>\r\n      {show ? <Compo columndata1={columndata} /> : \"\"}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Bodal;\r\n","import React from 'react';\nimport './App.css';\nimport Bodal from './components/Bodal'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n     <Bodal/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}